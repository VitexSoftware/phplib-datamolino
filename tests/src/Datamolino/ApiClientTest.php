<?php

namespace Test\Datamolino;

use Datamolino\ApiClient;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-02-15 at 16:59:16.
 */
class ApiClientTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var ApiClient
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ApiClient();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Datamolino\ApiClient::setUp
     */
    public function testSetUp()
    {
        $this->object->setUp(['section'=>'test']);
    }

    /**
     * Test Constructor
     *
     * @covers Datamolino\ApiClient::__construct
     */
    public function testConstructor()
    {
        $classname = get_class($this->object);
        $section  = $this->object->getSection();

        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();
        $mock->__construct(1, ['debug' => false]);

        $mock->__construct(null,
            [
                'url' => constant('DATAMOLINO_URL'),
                'debug' => true,
                'section' => $section]);
    }
    
    
    /**
     * @covers Datamolino\ApiClient::curlInit
     */
    public function testCurlInit()
    {
        $this->object->curlInit();
    }

    /**
     * @covers Datamolino\ApiClient::processInit
     */
    public function testProcessInit()
    {
        $this->object->processInit(1);
    }

    /**
     * @covers Datamolino\ApiClient::setSection
     */
    public function testSetSection()
    {
        $this->object->setSection('test');
    }

    /**
     * @covers Datamolino\ApiClient::getSection
     */
    public function testGetSection()
    {
        $this->object->getSection();
        $this->object->section = null;
        $this->object->getSection();
    }

    /**
     * @covers Datamolino\ApiClient::setPostFields
     */
    public function testSetPostFields()
    {
        $this->object->setPostFields('post');
    }

    /**
     * @covers Datamolino\ApiClient::getSectionURL
     */
    public function testGetSectionURL()
    {
        $this->object->getSectionURL();
    }

    /**
     * @covers Datamolino\ApiClient::sectionUrlWithSuffix
     */
    public function testSectionUrlWithSuffix()
    {
        $this->object->sectionUrlWithSuffix('test');
    }

    /**
     * @covers Datamolino\ApiClient::updateApiURL
     */
    public function testUpdateApiURL()
    {
        $this->object->updateApiURL();
    }

    /**
     * @covers Datamolino\ApiClient::requestData
     */
    public function testRequestData()
    {
        $this->object->requestData();
        $this->object->requestData('/test');
    }

    /**
     * @covers Datamolino\ApiClient::authentication
     */
    public function testAuthentication()
    {
        $this->object->authentication();
    }

    /**
     * @covers Datamolino\ApiClient::addUrlParams
     */
    public function testAddUrlParams()
    {
        $this->assertEquals('http://vitexsoftware.cz/path?id=1&a=b',
            $this->object->addUrlParams('http://vitexsoftware.cz/path?a=b',
                ['id' => 1], TRUE));
    }

    /**
     * @covers Datamolino\ApiClient::addDefaultUrlParams
     */
    public function testAddDefaultUrlParams()
    {
        $this->object->defaultUrlParams       = [];
        $this->assertEquals('http://vitexsoftware.cz?a=b',
            $this->object->addDefaultUrlParams('http://vitexsoftware.cz?a=b'));
        $this->object->defaultUrlParams['id'] = 1;
        $this->assertEquals('http://vitexsoftware.cz/path?a=b&id=1',
            $this->object->addDefaultUrlParams('http://vitexsoftware.cz/path?a=b'));
    }

    /**
     * @covers Datamolino\ApiClient::rawResponseToArray
     */
    public function testRawResponseToArray()
    {
        $this->object->rawResponseToArray('{}');
    }

    /**
     * @covers Datamolino\ApiClient::parseResponse
     */
    public function testParseResponse()
    {
        $this->object->parseResponse(['message'=>'test'], 200);
    }

    /**
     * @covers Datamolino\ApiClient::parseError
     */
    public function testParseError()
    {
        $this->object->parseError(['message'=>'error']);
    }

    /**
     * @covers Datamolino\ApiClient::doCurlRequest
     */
    public function testDoCurlRequest()
    {
        $this->object->doCurlRequest($this->object->apiURL, 'GET');
    }

    /**
     * @covers Datamolino\ApiClient::saveDebugFiles
     */
    public function testSaveDebugFiles()
    {
        $this->object->saveDebugFiles();
    }

    /**
     * @covers Datamolino\ApiClient::loadFromAPI
     */
    public function testLoadFromAPI()
    {
        $this->object->loadFromAPI(1);
    }

    /**
     * @covers Datamolino\ApiClient::logResult
     */
    public function testLogResult()
    {
        $this->object->logResult();
    }

    /**
     * @covers Datamolino\ApiClient::getTokenString
     */
    public function testGetTokenString()
    {
        $this->object->getTokenString();
    }


    /**
     * @covers Datamolino\ApiClient::ignore404
     */
    public function testIgnore404()
    {
        $this->object->ignore404(true);
        $this->assertTrue($this->object->ignore404());
    }

    /**
     * @covers Datamolino\ApiClient::postData
     */
    public function testPostData()
    {
        $this->object->postData();
    }
    
    
    /**
     * @covers Datamolino\ApiClient::disconnect
     */
    public function testDisconnect()
    {
        $this->object->disconnect();
    }

    /**
     * @covers Datamolino\ApiClient::__wakeup
     */
    public function test__wakeup()
    {
        $this->object->__wakeup();
    }

    /**
     * @covers Datamolino\ApiClient::__destruct
     */
    public function test__destruct()
    {
        $this->object->__destruct();
    }

}
